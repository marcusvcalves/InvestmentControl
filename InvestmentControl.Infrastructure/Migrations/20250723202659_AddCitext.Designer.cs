// <auto-generated />
using System;
using InvestmentControl.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestmentControl.Infrastructure.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20250723202659_AddCitext")]
    partial class AddCitext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("assets_pkey");

                    b.HasIndex("Code")
                        .HasDatabaseName("idx_assets_code");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<decimal>("Brokerage")
                        .HasColumnType("numeric")
                        .HasColumnName("brokerage");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer")
                        .HasColumnName("operation_type");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("operations_pkey");

                    b.HasIndex(new[] { "AssetId" }, "idx_operations_asset_id");

                    b.HasIndex(new[] { "CreatedAt" }, "idx_operations_created_at");

                    b.HasIndex(new[] { "UserId" }, "idx_operations_user_id");

                    b.ToTable("operations", (string)null);
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<decimal>("MediumPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("medium_price");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("numeric")
                        .HasColumnName("profit_loss");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("positions_pkey");

                    b.HasIndex(new[] { "AssetId" }, "idx_positions_asset_id");

                    b.HasIndex(new[] { "UserId" }, "idx_positions_user_id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("quotations_pkey");

                    b.HasIndex(new[] { "AssetId" }, "idx_quotations_asset_id");

                    b.HasIndex(new[] { "CreatedAt" }, "idx_quotations_created_at");

                    b.ToTable("quotations", (string)null);
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BrokeragePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("brokerage_percentage");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Operation", b =>
                {
                    b.HasOne("InvestmentControl.Domain.Models.Entities.Asset", "Asset")
                        .WithMany("Operations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_operations");

                    b.HasOne("InvestmentControl.Domain.Models.Entities.User", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_operations");

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Position", b =>
                {
                    b.HasOne("InvestmentControl.Domain.Models.Entities.Asset", "Asset")
                        .WithMany("Positions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_positions");

                    b.HasOne("InvestmentControl.Domain.Models.Entities.User", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_positions");

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Quotation", b =>
                {
                    b.HasOne("InvestmentControl.Domain.Models.Entities.Asset", "Asset")
                        .WithMany("Quotations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_quotations");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.Asset", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Positions");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("InvestmentControl.Domain.Models.Entities.User", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
